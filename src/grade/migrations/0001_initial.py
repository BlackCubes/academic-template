# Generated by Django 5.1.3 on 2024-12-02 18:51

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('student', '0001_initial'),
        ('task', '0002_alter_task_group'),
    ]

    operations = [
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, error_messages={'unique': 'The UUID is not unique'}, unique=True)),
                ('score', models.PositiveIntegerField(default=0, error_messages={'blank': 'The score cannot be empty', 'invalid': 'Invalid value for score', 'min_value': 'The score should be more than 0', 'required': 'The score is required'}, validators=[django.core.validators.MinValueValidator(limit_value=0)])),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('task', models.ForeignKey(error_messages={'blank': 'The task cannot be empty', 'does_not_exist': 'The task does not exist', 'invalid': 'Invalid value for the task', 'null': 'The task cannot be empty', 'required': 'The task is required'}, on_delete=django.db.models.deletion.CASCADE, related_name='weight_group', to='task.task')),
            ],
        ),
        migrations.CreateModel(
            name='ScoreStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, error_messages={'unique': 'The UUID is not unique'}, unique=True)),
                ('submitted_at', models.DateTimeField(default=django.utils.timezone.now, error_messages={'blank': 'The submitted date cannot be empty', 'invalid': 'Invalid UTC datetime value for the submitted date', 'invalid_date': 'Invalid date value for the submitted date', 'invalid_datetime': 'Invalid UTC datetime value for the submitted date', 'null': 'The submitted date cannot be empty', 'required': 'The submitted date is required'})),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('score', models.ForeignKey(error_messages={'blank': 'The score cannot be empty', 'does_not_exist': 'The score does not exist', 'invalid': 'Invalid value for the score', 'null': 'The score cannot be empty', 'required': 'The score is required'}, on_delete=django.db.models.deletion.CASCADE, related_name='student_scores', to='grade.score')),
                ('student', models.ForeignKey(error_messages={'blank': 'The student cannot be empty', 'does_not_exist': 'The student does not exist', 'invalid': 'Invalid value for the student', 'null': 'The student cannot be empty', 'required': 'The student is required'}, on_delete=django.db.models.deletion.CASCADE, related_name='score_history', to='student.student')),
            ],
        ),
        migrations.CreateModel(
            name='Weight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, error_messages={'unique': 'The UUID is not unique'}, unique=True)),
                ('weight', models.DecimalField(decimal_places=2, default=0.0, error_messages={'blank': 'The weight cannot be empty', 'invalid': 'Invalid decimal value for the weight', 'max_digits': 'The weight should be less than 5 digits', 'max_value': 'The weight should be less than 100.00', 'min_value': 'The weight should be more than 0.00', 'required': 'The full name is required.'}, max_digits=5)),
                ('group', models.ForeignKey(error_messages={'blank': 'The group cannot be empty', 'does_not_exist': 'The group does not exist', 'invalid': 'Invalid value for the group', 'null': 'The group cannot be empty', 'required': 'The group is required'}, on_delete=django.db.models.deletion.CASCADE, related_name='weight_group', to='task.group')),
            ],
        ),
    ]
