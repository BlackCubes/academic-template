# Generated by Django 5.1.3 on 2024-11-16 04:51

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, error_messages={'unique': 'The UUID is not unique'}, unique=True)),
                ('level', models.PositiveIntegerField(choices=[(0, 'Kindergarten'), (1, '1st'), (2, '2nd'), (3, '3rd'), (4, '4th'), (5, '5th'), (6, '6th'), (7, '7th'), (8, '8th'), (9, '9th'), (10, '10th'), (11, '11th'), (12, '12th')], default=0, error_messages={'blank': 'The level cannot be empty', 'invalid': 'The level must be one of the defined choices', 'max_value': 'The level should not exceed 12', 'min_value': 'The level should not be less than 0', 'required': 'The level is required'}, validators=[django.core.validators.MinValueValidator(limit_value=0), django.core.validators.MaxValueValidator(limit_value=12)])),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, error_messages={'unique': 'The UUID is not unique'}, unique=True)),
                ('student_id', models.CharField(error_messages={'blank': 'The student ID cannot be empty', 'invalid': 'Invalid value for the student ID', 'max_length': 'The student ID should not exceed 10 characters', 'null': 'The student ID cannot be empty', 'required': 'The student ID is required.'}, max_length=10)),
                ('full_name', models.CharField(error_messages={'blank': 'The full name cannot be empty', 'invalid': 'Invalid value for the full name', 'max_length': 'The full name should not exceed 10 characters', 'null': 'The full name cannot be empty', 'required': 'The full name is required.'}, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudentLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, error_messages={'unique': 'The UUID is not unique'}, unique=True)),
                ('year', models.PositiveIntegerField(default=2024, error_messages={'blank': 'The year cannot be empty', 'invalid': 'Invalid value for year', 'max_value': 'The year should not exceed the current year', 'min_value': 'The year should be between the current year and 50 years', 'required': 'The level is required'}, validators=[django.core.validators.MinValueValidator(limit_value=1974), django.core.validators.MaxValueValidator(limit_value=2024)])),
                ('is_current', models.BooleanField(default=False, error_messages={'invalid': "Invalid value for 'is current'. Must be true or false", 'required': "The 'is current' is required"})),
                ('notes', models.TextField(blank=True, error_messages={'invalid': 'Invalid value for notes', 'max_length': 'The notes must not exceed 500 characters'}, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('level', models.ForeignKey(error_messages={'blank': 'The level cannot be empty', 'does_not_exist': 'The level does not exist', 'invalid': 'Invalid value for the level', 'null': 'The level cannot be empty', 'required': 'The level is required'}, on_delete=django.db.models.deletion.CASCADE, related_name='student_records', to='student.level')),
                ('student', models.ForeignKey(error_messages={'blank': 'The student cannot be empty', 'does_not_exist': 'The student does not exist', 'invalid': 'Invalid value for the student', 'null': 'The student cannot be empty', 'required': 'The student is required'}, on_delete=django.db.models.deletion.CASCADE, related_name='level_history', to='student.student')),
            ],
        ),
    ]
